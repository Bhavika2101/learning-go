// ********RoostGPT********
/*
Test generated by RoostGPT for test java-turbo-test using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=71f7fb5a80
ROOST_METHOD_SIG_HASH=71f7fb5a80


*/

// ********RoostGPT********
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-turbo-test using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=71f7fb5a80
ROOST_METHOD_SIG_HASH=71f7fb5a80


*/

// ********RoostGPT********
package HammingDistance

import (
	"bytes"
	"log"
	"os"
	"testing"
)

func TestHammingDistanceNoDifference(t *testing.T) {
	a, b := "Golang", "Golang"
	distance := hammingDistance(a, b)
	if distance != 0 {
		t.Errorf("Expected Hamming distance to be 0, got %d", distance)
	}
}

func TestHammingDistanceSingleDifference(t *testing.T) {
	a, b := "Golang", "Solang"
	distance := hammingDistance(a, b)
	if distance != 1 {
		t.Errorf("Expected Hamming distance to be 1, got %d", distance)
	}
}

func TestHammingDistanceMaxDifference(t *testing.T) {
	a, b := "Golang", "Python"
	expectedDistance := len(a)
	distance := hammingDistance(a, b)
	if distance != expectedDistance {
		t.Errorf("Expected Hamming distance to be %d, got %d", expectedDistance, distance)
	}
}

func TestHammingDistanceDifferentLengths(t *testing.T) {
	var buf bytes.Buffer
	log.SetOutput(&buf)
	defer func() {
		log.SetOutput(os.Stderr) // Restore default log output
	}()

	a, b := "Go", "Golang"
	hammingDistance(a, b)

	expectedErrMsg := "strings are not of equal length"
	if !bytes.Contains(buf.Bytes(), []byte(expectedErrMsg)) {
		t.Errorf("Expected an error log containing '%s', got '%s'", expectedErrMsg, buf.String())
	}
}

// Additional tests can be added here to cover multiple differences, unicode characters, performance tests, etc.
