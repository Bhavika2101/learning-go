// ********RoostGPT********
/*
Test generated by RoostGPT for test java-turbo-test using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=hammingDistance_0d749de292
ROOST_METHOD_SIG_HASH=hammingDistance_f17e8d7bc0


*/

// ********RoostGPT********
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-turbo-test using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=hammingDistance_0d749de292
ROOST_METHOD_SIG_HASH=hammingDistance_f17e8d7bc0


*/

// ********RoostGPT********
package HammingDistance_test

import (
	. "path_to_HammingDistance_package" // Replace with actual path to the HammingDistance package
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestHammingDistanceNoDifference(t *testing.T) {
	input1 := "Golang"
	input2 := "Golang"
	expected := 0
	got := HammingDistance(input1, input2)
	if got != expected {
		t.Errorf("HammingDistance(%s, %s) = %d; want %d", input1, input2, got, expected)
	}
}

func TestHammingDistanceWithDifferences(t *testing.T) {
	input1 := "Golang"
	input2 := "Go1ang2"
	expected := 2
	got := HammingDistance(input1, input2)
	if got != expected {
		t.Errorf("HammingDistance(%s, %s) = %d; want %d", input1, input2, got, expected)
	}
}

func TestHammingDistanceDifferentLengths(t *testing.T) {
	assert.Panics(t, func() {
		HammingDistance("Go", "Gopher")
	}, "The code did not panic for strings of different lengths")
}

func TestHammingDistanceNonASCII(t *testing.T) {
	input1 := "GÃ¶lang"
	input2 := "Golang"
	expected := 1 // assuming the function counts in terms of runes
	got := HammingDistance(input1, input2)
	if got != expected {
		t.Errorf("HammingDistance(%s, %s) = %d; want %d", input1, input2, got, expected)
	}
}

func TestHammingDistanceEmptyStrings(t *testing.T) {
	input1 := ""
	input2 := ""
	expected := 0
	got := HammingDistance(input1, input2)
	if got != expected {
		t.Errorf("HammingDistance(%s, %s) = %d; want %d", input1, input2, got, expected)
	}
}
