// ********RoostGPT********
/*
Test generated by RoostGPT for test java-turbo-test using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=hammingDistance_0d749de292
ROOST_METHOD_SIG_HASH=hammingDistance_f17e8d7bc0


*/

// ********RoostGPT********
package hammingdistance // package names should be lowercase

import (
	"log"
	"testing"
)

// Function for calculating Hamming distance, which is the test subject
func hammingDistance(a, b string) int {
	if len(a) != len(b) {
		log.Fatal("Strings are of different length")
	}
	var distance int = 0
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			distance++
		}
	}
	return distance
}

// TestHammingDistance calculates Hamming distance between two strings and checks if it matches the expected value
func TestHammingDistance(t *testing.T) {
	// List of test cases
	testCases := []struct {
		name     string
		a        string
		b        string
		expected int
	}{
		{"IdenticalStrings", "test", "test", 0},
		{"WithDifferences", "karolin", "kathrin", 3},
		{"DifferentLengths", "1011101", "1001001", -1}, // -1 indicates we expect a log.Fatal
		{"EmptyStrings", "", "", 0},
		// Additional test cases could be added here
	}

	originalLogFatal := log.Fatal

	defer func() { log.Fatal = originalLogFatal }()

	// Mock log.Fatal to test different length strings case
	logFatalCalled := false
	logMsg := ""
	log.Fatal = func(v ...interface{}) {
		logFatalCalled = true
		logMsg = v[0].(string)
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			if tc.expected == -1 {
				// We're testing the condition where log.Fatal should be called
				hammingDistance(tc.a, tc.b)
				if !logFatalCalled {
					t.Errorf("Expected log.Fatal to be called with different length strings")
				}
				if logMsg != "Strings are of different length" {
					t.Errorf("Expected log.Fatal to be called with message 'Strings are of different length' but got '%s'", logMsg)
				}
				// Reset the flags
				logFatalCalled = false
				logMsg = ""
			} else {
				// Normal test case
				actual := hammingDistance(tc.a, tc.b)
				if actual != tc.expected {
					t.Errorf("Expected Hamming distance of %d, but got %d", tc.expected, actual)
				}
			}
		})

		if logFatalCalled {
			// Break the loop if log.Fatal was called to prevent further tests from running
			break
		}
	}
}
