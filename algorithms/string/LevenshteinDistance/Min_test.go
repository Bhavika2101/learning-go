// ********RoostGPT********
/*
Test generated by RoostGPT for test java-turbo-test using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=min_0cdd0dbb80
ROOST_METHOD_SIG_HASH=min_296d0913dd


*/

// ********RoostGPT********
package LevenshteinDistance

import (
	"testing"
)

func TestMinWithDistinctPositiveNumbers(t *testing.T) {
	a, b := uint16(15), uint16(10)
	expected := b
	result := min(a, b)
	if result != expected {
		t.Errorf("min(%d, %d) = %d; expected %d", a, b, result, expected)
	}
}

func TestMinWithEqualNumbers(t *testing.T) {
	a := uint16(25)
	expected := a
	result := min(a, a)
	if result != expected {
		t.Errorf("min(%d, %d) = %d; expected %d", a, a, result, expected)
	}
}

func TestMinWithZeroValue(t *testing.T) {
	a, b := uint16(0), uint16(30)
	expected := a
	result := min(a, b)
	if result != expected {
		t.Errorf("min(%d, %d) = %d; expected %d", a, b, result, expected)
	}
}

func TestMinWithMaximumUint16Value(t *testing.T) {
	a, b := uint16(65535), uint16(30)
	expected := b
	result := min(a, b)
	if result != expected {
		t.Errorf("min(%d, %d) = %d; expected %d", a, b, result, expected)
	}
}

