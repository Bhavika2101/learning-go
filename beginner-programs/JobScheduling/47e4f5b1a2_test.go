// Test generated by RoostGPT for test golang-level0-JobSchd using AI Type Open AI and AI Model gpt-4-1106-preview

package main

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

// sayHelloTo prints "Hello " followed by the name parameter.
func sayHelloTo(name string) {
	fmt.Println("Hello ", name)
}

func TestSayHelloTo(t *testing.T) {
	// Positive case: Test with a valid name
	t.Run("PositiveCase", func(t *testing.T) {
		var buf bytes.Buffer
		fmt.Println = func(format string, args ...interface{}) {
			fmt.Fprintf(&buf, format, args...)
		}
		defer func() {
			fmt.Println = fmt.Printf
		}()

		expected := "Hello Roost!\n"
		sayHelloTo("Roost!")
		actual := buf.String()

		assert.Equal(t, expected, actual, "Output should match expected greeting")
	})

	// Negative case: Test with an empty string
	t.Run("NegativeCase", func(t *testing.T) {
		var buf bytes.Buffer
		fmt.Println = func(format string, args ...interface{}) {
			fmt.Fprintf(&buf, format, args...)
		}
		defer func() {
			fmt.Println = fmt.Printf
		}()

		expected := "Hello \n"
		sayHelloTo("") // passing empty string
		actual := buf.String()

		assert.Equal(t, expected, actual, "Output should match expected greeting even if the name is empty")
	})
}

