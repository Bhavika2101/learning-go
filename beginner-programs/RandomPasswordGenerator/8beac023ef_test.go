// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4-1106-preview

package main

import (
	"testing"
	"unicode"
)

func TestGeneratePassword(t *testing.T) {
	tests := []struct {
		name        string
		length      int
		wantErr     bool
		testForType bool // Test for valid character types
	}{
		{"PositiveCase", 10, false, true},
		{"NegativeCaseZeroLength", 0, true, false},
		{"NegativeCaseNegativeLength", -1, true, false},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			password := generatePassword(tt.length)
			if (len(password) != tt.length) != tt.wantErr {
				t.Errorf("generatePassword() = %v, want length = %v", len(password), tt.length)
			}
			if tt.testForType && !tt.wantErr {
				if !isValidPassword(password) {
					t.Errorf("generatePassword() generated an invalid password = %v", password)
				}
			}
		})
	}
}

// isValidPassword checks whether a password contains at least one digit,
// one uppercase letter, one lowercase letter and one special character.
// This assumes that your password policy requires each of these.
func isValidPassword(password string) bool {
	var hasUpper, hasLower, hasNumber, hasSpecial bool
	for _, c := range password {
		switch {
		case unicode.IsUpper(c):
			hasUpper = true
		case unicode.IsLower(c):
			hasLower = true
		case unicode.IsDigit(c):
			hasNumber = true
		case unicode.IsPunct(c) || unicode.IsSymbol(c):
			hasSpecial = true
		}
	}
	return hasUpper && hasLower && hasNumber && hasSpecial
}

