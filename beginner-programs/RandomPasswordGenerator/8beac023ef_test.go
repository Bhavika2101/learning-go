// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4-1106-preview

package randompasswordgenerator

import (
	"testing"
	"unicode"
)

// TestGeneratePasswordPositiveCase checks if the generated password is of the expected length and contains expected character types.
func TestGeneratePasswordPositiveCase(t *testing.T) {
	length := 12 // Example password length
	password, err := generatePassword(length)
	if err != nil {
		t.Errorf("generatePassword(%d) returned an unexpected error: %v", length, err)
		return
	}
	if len(password) != length {
		t.Errorf("generatePassword(%d) generated password of incorrect length: got %d, want %d", length, len(password), length)
	}
	containsDigit := false
	containsUpper := false
	containsLower := false
	containsSpecial := false
	for _, r := range password {
		switch {
		case unicode.IsDigit(r):
			containsDigit = true
		case unicode.IsUpper(r):
			containsUpper = true
		case unicode.IsLower(r):
			containsLower = true
		case unicode.IsPunct(r) || unicode.IsSymbol(r):
			containsSpecial = true
		}
	}
	if !(containsDigit && containsUpper && containsLower && containsSpecial) {
		t.Errorf("generatePassword(%d) generated password does not contain all required character types", length)
	}
}

// TestGeneratePasswordNegativeCase tests the handling of invalid inputs such as negative password length.
func TestGeneratePasswordNegativeCase(t *testing.T) {
	length := -1 // Negative password length
	_, err := generatePassword(length)
	if err == nil {
		t.Errorf("generatePassword(%d) should have returned an error for negative password length", length)
	}
}

