// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4-1106-preview

// import necessary packages
package main

import (
	"strings"
	"testing"
)

// testPositiveCase tests if the generatePassword function
// returns a password of the expected length and composition.
func testPositiveCase(t *testing.T) {
	length := 10
	password := generatePassword(length)
	if len(password) != length {
		t.Errorf("Expected password of length %d, got %d", length, len(password))
	}
	if !strings.ContainsAny(password, "0123456789") {
		t.Error("Password does not contain any digits")
	}
	if !strings.ContainsAny(password, "~`=+%^*/()[]{}/!@#$?|") {
		t.Error("Password does not contain any special characters")
	}
	if !strings.ContainsAny(password, "ABCDEFGHIJKLMNOPQRSTUVWXYZ") {
		t.Error("Password does not contain any uppercase letters")
	}
	if !strings.ContainsAny(password, "abcdefghijklmnopqrstuvwxyz") {
		t.Error("Password does not contain any lowercase letters")
	}
}

// testNegativeCase tests generatePassword function with
// invalid input.
func testNegativeCase(t *testing.T) {
	length := -1 // invalid length for a password
	password := generatePassword(length)
	if len(password) != 0 {
		t.Errorf("Expected no password for negative length, got %d", len(password))
	}
}

// TestGeneratePassword wraps all test cases
func TestGeneratePassword(t *testing.T) {
	t.Run("PositiveCase", testPositiveCase)
	t.Run("NegativeCase", testNegativeCase)
}

