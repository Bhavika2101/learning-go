// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4-1106-preview

package main

import (
	"testing"
	"unicode"
)

func TestGeneratePassword(t *testing.T) {
	passwordLength := 8
	password, err := generatePassword(passwordLength)
	if err != nil {
		t.Fatalf("Failed to generate password: %v", err)
	}

	if len(password) != passwordLength {
		t.Errorf("Generated password length = %d; want %d", len(password), passwordLength)
	}

	var hasUpper, hasLower, hasNumber, hasSymbol bool
	for _, char := range password {
		switch {
		case unicode.IsUpper(char):
			hasUpper = true
		case unicode.IsLower(char):
			hasLower = true
		case unicode.IsDigit(char):
			hasNumber = true
		case unicode.IsPunct(char) || unicode.IsSymbol(char):
			hasSymbol = true
		}
	}

	if !hasUpper {
		t.Error("Generated password does not contain an uppercase letter")
	}
	if !hasLower {
		t.Error("Generated password does not contain a lowercase letter")
	}
	if !hasNumber {
		t.Error("Generated password does not contain a number")
	}
	if !hasSymbol {
		t.Error("Generated password does not contain a symbol")
	}
}

func TestGeneratePasswordNegativeCase(t *testing.T) {
	passwordLength := -1
	_, err := generatePassword(passwordLength)
	if err == nil {
		t.Error("Expected an error for negative password length")
	}
}

