// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4

package main

import (
	"fmt"
	"math/rand"
	"testing"
	"time"
)

func TestGeneratePassword_24386dfbfc(t *testing.T) {
	// test cases
	type test struct {
		length int
	}

	tests := []test{
		{length: 10}, // TODO: Change the length
		{length: 15}, // TODO: Change the length
	}

	for _, tt := range tests {
		t.Run(fmt.Sprintf("Length: %v", tt.length), func(t *testing.T) {
			rand.Seed(time.Now().UnixNano())
			password := generatePassword(tt.length)

			if len(password) != tt.length {
				t.Errorf("Expected length %v, but got %v", tt.length, len(password))
			}

			// Check for at least one digit and one special character
			digitFound := false
			specialFound := false
			for _, ch := range password {
				if ch >= '0' && ch <= '9' {
					digitFound = true
				} else if ch == '~' || ch == '=' || ch == '+' || ch == '%' || ch == '^' || ch == '*' || ch == '/' || ch == '(' || ch == ')' || ch == '[' || ch == ']' || ch == '{' || ch == '}' || ch == '!' || ch == '@' || ch == '#' || ch == '$' || ch == '?' || ch == '|' {
					specialFound = true
				}
			}

			if !digitFound || !specialFound {
				t.Errorf("Expected at least one digit and one special character in password, but got %v", password)
			}

			t.Log("Password generated: ", password)
		})
	}
}
