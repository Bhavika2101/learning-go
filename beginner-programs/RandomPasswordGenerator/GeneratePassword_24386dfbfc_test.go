// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4

package main

import (
	"testing"
	"unicode"
)

func TestGeneratePassword(t *testing.T) {
	length := 10
	password := generatePassword(length)

	// Test 1: Check if the password length is correct
	if len(password) != length {
		t.Errorf("Expected password length of %d, but got %d", length, len(password))
	}

	// Test 2: Check if the password contains at least one digit
	hasDigit := false
	for _, char := range password {
		if unicode.IsDigit(char) {
			hasDigit = true
			break
		}
	}
	if !hasDigit {
		t.Errorf("Expected password to have at least one digit")
	}

	// Test 3: Check if the password contains at least one special character
	specials := "~=+%^*/()[]{}/!@#$?|"
	hasSpecial := false
	for _, char := range password {
		if unicode.IsSymbol(char) || unicode.IsPunct(char) {
			hasSpecial = true
			break
		}
	}
	if !hasSpecial {
		t.Errorf("Expected password to have at least one special character")
	}

	// Test 4: Check if the password contains both lower and upper case letters
	hasLower := false
	hasUpper := false
	for _, char := range password {
		if unicode.IsLower(char) {
			hasLower = true
		} else if unicode.IsUpper(char) {
			hasUpper = true
		}
		if hasLower && hasUpper {
			break
		}
	}
	if !hasLower || !hasUpper {
		t.Errorf("Expected password to have both lower and upper case letters")
	}
}
