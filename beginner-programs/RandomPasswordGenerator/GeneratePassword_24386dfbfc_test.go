// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4

package main

import (
	"strings"
	"testing"
)

func TestGeneratePassword(t *testing.T) {
	tests := []struct {
		name     string
		length   int
		validate func(string) bool
		errorMsg string
	}{
		{
			name:   "test length of password",
			length: 10,
			validate: func(password string) bool {
				return len(password) == 10
			},
			errorMsg: "Password length does not match",
		},
		{
			name:   "test password contains digit",
			length: 10,
			validate: func(password string) bool {
				return strings.ContainsAny(password, "0123456789")
			},
			errorMsg: "Password does not contain a digit",
		},
		{
			name:   "test password contains special character",
			length: 10,
			validate: func(password string) bool {
				return strings.ContainsAny(password, "~=+%^*/()[]{}/!@#$?|")
			},
			errorMsg: "Password does not contain a special character",
		},
		{
			name:   "test password contains uppercase letter",
			length: 10,
			validate: func(password string) bool {
				return strings.ContainsAny(password, "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
			},
			errorMsg: "Password does not contain an uppercase letter",
		},
		{
			name:   "test password contains lowercase letter",
			length: 10,
			validate: func(password string) bool {
				return strings.ContainsAny(password, "abcdefghijklmnopqrstuvwxyz")
			},
			errorMsg: "Password does not contain a lowercase letter",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			password := generatePassword(tt.length)
			if !tt.validate(password) {
				t.Error(tt.errorMsg)
			}
		})
	}

	t.Run("test different passwords for different calls", func(t *testing.T) {
		password1 := generatePassword(10)
		password2 := generatePassword(10)
		if password1 == password2 {
			t.Error("Password is not unique for different calls")
		}
	})
}
