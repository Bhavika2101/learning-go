// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4

package main

import (
	"strings"
	"testing"
)

func TestGeneratePassword(t *testing.T) {
	digits := "0123456789"
	specials := "~=+%^*/()[]{}/!@#$?|"

	tests := []struct {
		name  string
		input int
	}{
		{"Length 0", 0},
		{"Length 1", 1},
		{"Length 2", 2},
		{"Length 10", 10},
		{"Length 100", 100},
		{"Negative Length", -5},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := generatePassword(tt.input)

			if tt.input <= 0 && got != "" {
				t.Fatalf("expected an empty string, but got %v", got)
			} else if tt.input == 1 && !strings.Contains(digits, got) {
				t.Fatalf("expected a digit, but got %v", got)
			} else if tt.input == 2 && (!strings.Contains(digits, string(got[0])) || !strings.Contains(specials, string(got[1]))) {
				t.Fatalf("expected a digit and a special character, but got %v", got)
			} else if tt.input > 2 && len(got) != tt.input {
				t.Fatalf("expected a string of length %v, but got a string of length %v", tt.input, len(got))
			}

			// Check if the password contains at least one digit and one special character
			if tt.input > 2 {
				digitFound := false
				specialCharFound := false
				for _, char := range got {
					if strings.Contains(digits, string(char)) {
						digitFound = true
					}
					if strings.Contains(specials, string(char)) {
						specialCharFound = true
					}
				}
				if !digitFound || !specialCharFound {
					t.Fatalf("expected the password to contain at least one digit and one special character, but it didn't")
				}
			}
		})
	}

	// Check if the passwords are random and different each time
	prev := generatePassword(10)
	for i := 0; i < 10; i++ {
		next := generatePassword(10)
		if next == prev {
			t.Fatalf("expected the passwords to be different, but they were the same")
		}
		prev = next
	}
}
