// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4

package main

import (
	"testing"
	"strings"
	"regexp"
)

func TestGeneratePassword(t *testing.T) {
	tests := []struct {
		name  string
		input int
	}{
		{"Test with positive integer", 10},
		{"Test with negative integer", -1},
		{"Test with zero", 0},
		{"Test with large integer", 10000},
		{"Test with length 1", 1},
		{"Test with length 2", 2},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := generatePassword(tt.input)
			if len(got) != tt.input {
				t.Errorf("Expected length of %v, but got %v", tt.input, len(got))
			}
			if tt.input > 1 {
				matched, _ := regexp.MatchString("[0-9]", string(got[0]))
				if !matched {
					t.Errorf("Expected first character to be a digit, but got %v", string(got[0]))
				}
				matched, _ = regexp.MatchString("[~=+%^*/()[]{}/!@#$?|]", string(got[1]))
				if !matched {
					t.Errorf("Expected second character to be a special character, but got %v", string(got[1]))
				}
			}
			if tt.input > 2 {
				all := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~=+%^*/()[]{}/!@#$?|"
				for _, ch := range got {
					if !strings.ContainsRune(all, rune(ch)) {
						t.Errorf("Expected all characters to be from predefined set, but got %v", string(ch))
					}
				}
			}
			prev := generatePassword(tt.input)
			if prev == got {
				t.Errorf("Expected different passwords on multiple calls, but got same")
			}
		})
	}
}
