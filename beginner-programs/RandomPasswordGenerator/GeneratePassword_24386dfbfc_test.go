// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4

package main

import (
	"strings"
	"testing"
	"math/rand"
	"time"
)

func TestGeneratePassword(t *testing.T) {
	digits := "0123456789"
	specials := "~=+%^*/()[]{}/!@#$?|"
	all := "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
		"abcdefghijklmnopqrstuvwxyz" +
		digits + specials

	tests := []struct {
		name     string
		length   int
		hasError bool
	}{
		{"password length", 10, false},
		{"contains digit", 10, false},
		{"contains special character", 10, false},
		{"only contains defined characters", 10, false},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			password := generatePassword(test.length)

			switch test.name {
			case "password length":
				if len(password) != test.length {
					t.Errorf("Expected password length of %v, but got %v", test.length, len(password))
				}
			case "contains digit":
				if strings.IndexAny(password, digits) == -1 {
					t.Errorf("Expected password to contain at least one digit, but got %v", password)
				}
			case "contains special character":
				if strings.IndexAny(password, specials) == -1 {
					t.Errorf("Expected password to contain at least one special character, but got %v", password)
				}
			case "only contains defined characters":
				for _, char := range password {
					if !strings.ContainsRune(all, char) {
						t.Errorf("Expected password to only contain characters from the defined set, but got %v", password)
					}
				}
			}
		})
	}
}

func generatePassword(length int) string {
	rand.Seed(time.Now().UnixNano())
	digits := "0123456789"
	specials := "~=+%^*/()[]{}/!@#$?|"
	all := "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
		"abcdefghijklmnopqrstuvwxyz" +
		digits + specials

	buf := make([]byte, length)
	buf[0] = digits[rand.Intn(len(digits))]
	buf[1] = specials[rand.Intn(len(specials))]

	for i := 2; i < length; i++ {
		buf[i] = all[rand.Intn(len(all))]
	}
	rand.Shuffle(len(buf), func(i, j int) {
		buf[i], buf[j] = buf[j], buf[i]
	})

	str := string(buf)
	return str
}
