// Test generated by RoostGPT for test golang-level0-PassGen using AI Type Open AI and AI Model gpt-4

package main

import (
	"strings"
	"testing"
	"math/rand"
	"time"
)

func TestGeneratePassword_24386dfbfc(t *testing.T) {
	rand.Seed(time.Now().UnixNano())
	digits := "0123456789"
	specials := "~=+%^*/()[]{}/!@#$?|"
	all := "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
		"abcdefghijklmnopqrstuvwxyz" +
		digits + specials

	testCases := []struct {
		desc   string
		length int
	}{
		{"Password length", 10},
		{"Password contains digit", 10},
		{"Password contains special character", 10},
		{"Password contains alphanumeric", 10},
		{"Password uniqueness", 10},
		{"Password with length less than 2", 1},
	}

	for _, tc := range testCases {
		t.Run(tc.desc, func(t *testing.T) {
			password := generatePassword(tc.length)
			if len(password) != tc.length {
				t.Errorf("Expected password of length %d, but got %d", tc.length, len(password))
			}

			if tc.desc == "Password contains digit" && !strings.ContainsAny(password, digits) {
				t.Errorf("Expected password to contain at least one digit")
			}

			if tc.desc == "Password contains special character" && !strings.ContainsAny(password, specials) {
				t.Errorf("Expected password to contain at least one special character")
			}

			if tc.desc == "Password contains alphanumeric" {
				alphabet := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
				if !strings.ContainsAny(password, alphabet) {
					t.Errorf("Expected password to contain at least one alphanumeric character")
				}
			}

			if tc.desc == "Password uniqueness" {
				password2 := generatePassword(tc.length)
				if password == password2 {
					t.Errorf("Expected unique passwords, but got identical")
				}
			}

			if tc.desc == "Password with length less than 2" && !strings.ContainsAny(password, all) {
				t.Errorf("Expected password to contain at least one character from the allowed set")
			}
		})
	}
}

func generatePassword(length int) string {
	digits := "0123456789"
	specials := "~=+%^*/()[]{}/!@#$?|"
	all := "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
		"abcdefghijklmnopqrstuvwxyz" +
		digits + specials

	buf := make([]byte, length)
	buf[0] = digits[rand.Intn(len(digits))]
	buf[1] = specials[rand.Intn(len(specials))]

	for i := 2; i < length; i++ {
		buf[i] = all[rand.Intn(len(all))]
	}
	rand.Shuffle(len(buf), func(i, j int) {
		buf[i], buf[j] = buf[j], buf[i]
	})

	str := string(buf)
	return str
}
